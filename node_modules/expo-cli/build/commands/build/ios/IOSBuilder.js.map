{"version":3,"sources":["../../../../src/commands/build/ios/IOSBuilder.ts"],"names":["noBundleIdMessage","missingBundleIdentifierError","XDLError","IOSBuilder","BaseBuilder","run","options","type","utils","askBuildType","archive","simulator","maybeWarnDamagedSimulator","log","addNewLineIfNone","checkForBuildInProgress","prepareCredentials","publishedExpIds","ensureProjectIsPublished","publicUrl","checkStatusBeforeBuild","build","getAppleCtx","appleCtx","apple","setup","authenticate","bestEffortAppleCtx","ctx","hasAppleCtx","appleId","ensureAppleCtx","nonInteractive","parent","confirm","name","message","chalk","green","checkProjectConfig","sdkVersion","manifest","checkIfSdkIsSupported","PLATFORMS","IOS","validateIcon","bundleIdentifier","ios","username","getUsernameAsync","recommendedBundleId","slug","undefined","newLine","cyan","bundleIdPrompt","default","validate","value","test","nonInteractiveHelp","modification","projectDir","skipSDKVersionRequirement","yellow","JSON","stringify","process","exit","updateProjectConfig","owner","getUserAsync","experienceName","context","Context","init","clearAndRevokeCredentialsIfRequested","skipCredentialsCheck","produceCredentials","e","code","ErrorCodes","NON_INTERACTIVE","link","bold","red","CommandError","credentials","getAllCredentials","_setupDistCert","appCredentials","distCertFromParams","SetupIosDist","error","_setupPushCert","pushKeyFromParams","SetupIosPush","_setupProvisioningProfile","distributionCert","provisioningProfileFromParams","teamId","SetupIosProvisioningProfile","distCert","getAppCredentials","ensureAppExists","enablePushNotifications","getDistCert","projectMetadata","clearCredentials","clearDistCert","clearPushKey","clearPushCert","clearProvisioningProfile","shouldClearAnything","credsToClear","determineCredentialsToClear","shouldRevokeOnApple","revokeCredentials","RemoveIosDist","removeSpecific","pushKey","getPushKey","RemoveIosPush","provisioningProfile","getProvisioningProfile","RemoveProvisioningProfile","pushCert","getPushCert","deletePushCert","credsToClearAll","Boolean","ensureReleaseExists","platform","icon","err","isMacOsCatalinaOrLater","os","semver","satisfies","release","underline","grey"],"mappings":"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","sourcesContent":["import os from 'os';\nimport chalk from 'chalk';\nimport pickBy from 'lodash/pickBy';\nimport { XDLError } from '@expo/xdl';\n\nimport terminalLink from 'terminal-link';\nimport semver from 'semver';\nimport { modifyConfigAsync } from '@expo/config';\nimport BaseBuilder from '../BaseBuilder';\nimport { PLATFORMS } from '../constants';\nimport * as utils from '../utils';\nimport * as apple from '../../../appleApi';\nimport prompt from '../../../prompt';\nimport { ensurePNGIsNotTransparent } from './utils/image';\nimport { runCredentialsManager } from '../../../credentials/route';\nimport { Context } from '../../../credentials/context';\nimport { displayProjectCredentials } from '../../../credentials/actions/list';\nimport { SetupIosDist } from '../../../credentials/views/SetupIosDist';\nimport { SetupIosPush } from '../../../credentials/views/SetupIosPush';\nimport { SetupIosProvisioningProfile } from '../../../credentials/views/SetupIosProvisioningProfile';\nimport CommandError, { ErrorCodes } from '../../../CommandError';\nimport log from '../../../log';\n\nimport {\n  RemoveIosDist,\n  getDistCertFromParams,\n  useDistCertFromParams,\n} from '../../../credentials/views/IosDistCert';\nimport {\n  RemoveIosPush,\n  getPushKeyFromParams,\n  usePushKeyFromParams,\n} from '../../../credentials/views/IosPushCredentials';\nimport {\n  RemoveProvisioningProfile,\n  getProvisioningProfileFromParams,\n  useProvisioningProfileFromParams,\n} from '../../../credentials/views/IosProvisioningProfile';\nimport { IosAppCredentials, IosDistCredentials } from '../../../credentials/credentials';\n\nconst noBundleIdMessage = `Your project must have a \\`bundleIdentifier\\` set in the Expo config (app.json or app.config.js).\\nSee https://expo.fyi/bundle-identifier`;\n\nfunction missingBundleIdentifierError() {\n  return new XDLError('INVALID_OPTIONS', noBundleIdMessage);\n}\n\nclass IOSBuilder extends BaseBuilder {\n  appleCtx?: apple.AppleCtx;\n\n  async run(): Promise<void> {\n    // This gets run after all other validation to prevent users from having to answer this question multiple times.\n    this.options.type = await utils.askBuildType(this.options.type!, {\n      archive: 'Deploy the build to the store',\n      simulator: 'Run the build on a simulator',\n    });\n    this.maybeWarnDamagedSimulator();\n    log.addNewLineIfNone();\n    await this.checkForBuildInProgress();\n    if (this.options.type === 'archive') {\n      await this.prepareCredentials();\n    }\n    const publishedExpIds = await this.ensureProjectIsPublished();\n    if (!this.options.publicUrl) {\n      await this.checkStatusBeforeBuild();\n    }\n    await this.build(publishedExpIds);\n    this.maybeWarnDamagedSimulator();\n  }\n\n  async getAppleCtx(): Promise<apple.AppleCtx> {\n    if (!this.appleCtx) {\n      await apple.setup();\n      this.appleCtx = await apple.authenticate(this.options);\n    }\n    return this.appleCtx;\n  }\n\n  // Try to get the user to provide Apple credentials upfront\n  // We will be able to do full validation of their iOS creds this way\n  async bestEffortAppleCtx(ctx: Context): Promise<void> {\n    if (ctx.hasAppleCtx()) {\n      // skip prompts if already have apple ctx\n      return;\n    }\n    if (this.options.appleId) {\n      // skip prompts and auto authenticate if flags are passed\n      return await ctx.ensureAppleCtx(this.options);\n    }\n\n    const nonInteractive = this.options.parent && this.options.parent.nonInteractive;\n    if (nonInteractive) {\n      return;\n    }\n\n    const { confirm } = await prompt([\n      {\n        type: 'confirm',\n        name: 'confirm',\n        message: `Do you have access to the Apple account that will be used for submitting this app to the App Store?`,\n      },\n    ]);\n    if (confirm) {\n      return await ctx.ensureAppleCtx(this.options);\n    } else {\n      log(\n        chalk.green(\n          'No problem! 👌 \\nWe can’t auto-generate credentials if you don’t have access to the main Apple account. \\nBut we can still set it up if you upload your credentials.'\n        )\n      );\n    }\n  }\n\n  // All config validation should happen here before any build logic takes place.\n  // It's important that the errors are revealed in a thoughtful manner.\n  async checkProjectConfig(): Promise<void> {\n    // Run this first because the error messages are related\n    // to ExpoKit which is harder to change than the bundle ID.\n    await super.checkProjectConfig();\n\n    // Check the SDK version next as it's the second hardest thing to change.\n    const sdkVersion = this.manifest.sdkVersion;\n\n    await utils.checkIfSdkIsSupported(sdkVersion!, PLATFORMS.IOS);\n\n    // Validate the icon third since it's fairly easy to modify.\n    await this.validateIcon();\n\n    // Check the bundle ID and possibly prompt the user to add a new one.\n    const bundleIdentifier = this.manifest.ios?.bundleIdentifier;\n\n    if (!bundleIdentifier) {\n      // Recommend a bundle ID based on the username and project slug.\n      const username = await this.getUsernameAsync();\n      const recommendedBundleId = username ? `com.${username}.${this.manifest.slug}` : undefined;\n\n      log.newLine();\n      log(\n        log.chalk.cyan(\n          `Now we need to know your ${terminalLink(\n            'iOS bundle identifier',\n            'https://expo.fyi/bundle-identifier'\n          )}.\\nYou can change this in the future if you need to.`\n        )\n      );\n      log.newLine();\n\n      // Prompt the user for the bundle ID.\n      // Even if the project is using a dynamic config we can still\n      // prompt a better error message, recommend a default value, and help the user\n      // validate their custom bundle ID upfront.\n      const bundleIdPrompt = await prompt(\n        [\n          {\n            name: 'bundleIdentifier',\n            default: recommendedBundleId,\n            // The Apple helps people know this isn't an EAS feature.\n            message: `What would you like your iOS bundle identifier to be?`,\n            validate: (value: string) => /^[a-zA-Z][a-zA-Z0-9\\-.]+$/.test(value),\n          },\n        ],\n        {\n          nonInteractiveHelp: noBundleIdMessage,\n        }\n      );\n\n      const modification = await modifyConfigAsync(\n        this.projectDir,\n        { ios: { bundleIdentifier: bundleIdPrompt.bundleIdentifier } },\n        { skipSDKVersionRequirement: true }\n      );\n      if (modification.type === 'success') {\n        log.newLine();\n        // Success!\n        log(`Your iOS bundle identifier is now: ${bundleIdPrompt.bundleIdentifier}`);\n        log.newLine();\n      } else {\n        log.newLine();\n        if (modification.type === 'warn') {\n          // The project is using a dynamic config, give the user a helpful log and bail out.\n          log(log.chalk.yellow(modification.message));\n        } else {\n          log(\n            log.chalk.yellow(\n              'No Expo config was found. Please create an Expo config (`app.config.js` or `app.json`) in your project root.'\n            )\n          );\n        }\n\n        log(log.chalk.cyan(`Please add the following to your Expo config, and try again... `));\n        log.newLine();\n        log(\n          JSON.stringify({ ios: { bundleIdentifier: bundleIdPrompt.bundleIdentifier } }, null, 2)\n        );\n        log.newLine();\n        process.exit(1);\n      }\n      // Update with the latest bundle ID\n      this.updateProjectConfig();\n    }\n  }\n\n  private async getUsernameAsync(): Promise<string | undefined> {\n    if (this.manifest.owner) return this.manifest.owner;\n    return (await this.getUserAsync())?.username;\n  }\n\n  private async prepareCredentials() {\n    const username = await this.getUsernameAsync();\n    const experienceName = `@${username}/${this.manifest.slug}`;\n    const bundleIdentifier = this.manifest.ios?.bundleIdentifier;\n    if (!bundleIdentifier) throw missingBundleIdentifierError();\n    const context = new Context();\n    await context.init(this.projectDir);\n\n    await this.clearAndRevokeCredentialsIfRequested(context, { experienceName, bundleIdentifier });\n\n    if (this.options.skipCredentialsCheck) {\n      log('Skipping credentials check...');\n      return;\n    }\n    await this.bestEffortAppleCtx(context);\n\n    try {\n      await this.produceCredentials(context, experienceName, bundleIdentifier);\n    } catch (e) {\n      if (e.code === ErrorCodes.NON_INTERACTIVE) {\n        log.newLine();\n        const link = terminalLink(\n          'expo.fyi/credentials-non-interactive',\n          'https://expo.fyi/credentials-non-interactive'\n        );\n        log(\n          chalk.bold.red(\n            `Additional information needed to setup credentials in non-interactive mode.`\n          )\n        );\n        log(chalk.bold.red(`Learn more about how to resolve this: ${link}.`));\n        log.newLine();\n\n        // We don't want to display project credentials when we bail out due to\n        // non-interactive mode error, because we are unable to recover without\n        // user input.\n        throw new CommandError(\n          ErrorCodes.NON_INTERACTIVE,\n          'Unable to proceed, see the above error message.'\n        );\n      }\n\n      log(\n        chalk.bold.red(\n          'Failed to prepare all credentials. \\nThe next time you build, we will automatically use the following configuration:'\n        )\n      );\n      throw e;\n    } finally {\n      const credentials = await context.ios.getAllCredentials();\n      displayProjectCredentials(experienceName, bundleIdentifier, credentials);\n    }\n  }\n\n  async _setupDistCert(\n    ctx: Context,\n    experienceName: string,\n    bundleIdentifier: string,\n    appCredentials: IosAppCredentials\n  ): Promise<void> {\n    try {\n      const nonInteractive = this.options.parent && this.options.parent.nonInteractive;\n      const distCertFromParams = await getDistCertFromParams(this.options);\n      if (distCertFromParams) {\n        await useDistCertFromParams(ctx, appCredentials, distCertFromParams);\n      } else {\n        await runCredentialsManager(\n          ctx,\n          new SetupIosDist({ experienceName, bundleIdentifier, nonInteractive })\n        );\n      }\n    } catch (e) {\n      log.error('Failed to set up Distribution Certificate');\n      throw e;\n    }\n  }\n\n  async _setupPushCert(\n    ctx: Context,\n    experienceName: string,\n    bundleIdentifier: string,\n    appCredentials: IosAppCredentials\n  ): Promise<void> {\n    try {\n      const nonInteractive = this.options.parent && this.options.parent.nonInteractive;\n      const pushKeyFromParams = await getPushKeyFromParams(this.options);\n      if (pushKeyFromParams) {\n        await usePushKeyFromParams(ctx, appCredentials, pushKeyFromParams);\n      } else {\n        await runCredentialsManager(\n          ctx,\n          new SetupIosPush({ experienceName, bundleIdentifier, nonInteractive })\n        );\n      }\n    } catch (e) {\n      log.error('Failed to set up Push Key');\n      throw e;\n    }\n  }\n\n  async _setupProvisioningProfile(\n    ctx: Context,\n    experienceName: string,\n    bundleIdentifier: string,\n    appCredentials: IosAppCredentials,\n    distributionCert: IosDistCredentials\n  ) {\n    try {\n      const nonInteractive = this.options.parent && this.options.parent.nonInteractive;\n      const provisioningProfileFromParams = await getProvisioningProfileFromParams(this.options);\n      if (provisioningProfileFromParams) {\n        await useProvisioningProfileFromParams(\n          ctx,\n          appCredentials,\n          this.options.teamId!,\n          provisioningProfileFromParams,\n          distributionCert\n        );\n      } else {\n        await runCredentialsManager(\n          ctx,\n          new SetupIosProvisioningProfile({\n            experienceName,\n            bundleIdentifier,\n            distCert: distributionCert,\n            nonInteractive,\n          })\n        );\n      }\n    } catch (e) {\n      log.error('Failed to set up Provisioning Profile');\n      throw e;\n    }\n  }\n\n  async produceCredentials(ctx: Context, experienceName: string, bundleIdentifier: string) {\n    const appCredentials = await ctx.ios.getAppCredentials(experienceName, bundleIdentifier);\n\n    if (ctx.hasAppleCtx()) {\n      await apple.ensureAppExists(\n        ctx.appleCtx,\n        { experienceName, bundleIdentifier },\n        { enablePushNotifications: true }\n      );\n    }\n    await this._setupDistCert(ctx, experienceName, bundleIdentifier, appCredentials);\n\n    const distributionCert = await ctx.ios.getDistCert(experienceName, bundleIdentifier);\n    if (!distributionCert) {\n      throw new CommandError(\n        'INSUFFICIENT_CREDENTIALS',\n        `This build request requires a valid distribution certificate.`\n      );\n    }\n\n    await this._setupPushCert(ctx, experienceName, bundleIdentifier, appCredentials);\n\n    await this._setupProvisioningProfile(\n      ctx,\n      experienceName,\n      bundleIdentifier,\n      appCredentials,\n      distributionCert\n    );\n  }\n\n  async clearAndRevokeCredentialsIfRequested(ctx: Context, projectMetadata: any): Promise<void> {\n    const {\n      clearCredentials,\n      clearDistCert,\n      clearPushKey,\n      clearPushCert,\n      clearProvisioningProfile,\n    } = this.options;\n    const shouldClearAnything =\n      clearCredentials ||\n      clearDistCert ||\n      clearPushKey ||\n      clearPushCert ||\n      clearProvisioningProfile;\n    if (shouldClearAnything) {\n      const { experienceName, bundleIdentifier } = projectMetadata;\n      const credsToClear = this.determineCredentialsToClear();\n      await this.clearCredentials(ctx, experienceName, bundleIdentifier, credsToClear);\n    }\n  }\n\n  async clearCredentials(\n    ctx: Context,\n    experienceName: string,\n    bundleIdentifier: string,\n    credsToClear: Record<string, boolean>\n  ): Promise<void> {\n    const shouldRevokeOnApple = this.options.revokeCredentials;\n    const nonInteractive = this.options.parent && this.options.parent.nonInteractive;\n    const distributionCert = await ctx.ios.getDistCert(experienceName, bundleIdentifier);\n    if (credsToClear.distributionCert && distributionCert) {\n      await new RemoveIosDist(shouldRevokeOnApple, nonInteractive).removeSpecific(\n        ctx,\n        distributionCert\n      );\n    }\n\n    const pushKey = await ctx.ios.getPushKey(experienceName, bundleIdentifier);\n    if (credsToClear.pushKey && pushKey) {\n      await new RemoveIosPush(shouldRevokeOnApple, nonInteractive).removeSpecific(ctx, pushKey);\n    }\n\n    const appCredentials = await ctx.ios.getAppCredentials(experienceName, bundleIdentifier);\n    const provisioningProfile = await ctx.ios.getProvisioningProfile(\n      experienceName,\n      bundleIdentifier\n    );\n    if (credsToClear.provisioningProfile && provisioningProfile) {\n      await new RemoveProvisioningProfile(shouldRevokeOnApple, nonInteractive).removeSpecific(\n        ctx,\n        appCredentials\n      );\n    }\n\n    const pushCert = await ctx.ios.getPushCert(experienceName, bundleIdentifier);\n    if (credsToClear.pushCert && pushCert) {\n      await ctx.ios.deletePushCert(experienceName, bundleIdentifier);\n    }\n  }\n\n  determineCredentialsToClear(): Record<string, boolean> {\n    const {\n      clearCredentials,\n      clearDistCert,\n      clearPushKey,\n      clearPushCert,\n      clearProvisioningProfile,\n    } = this.options;\n    const credsToClearAll = {\n      distributionCert: Boolean(clearCredentials || clearDistCert),\n      pushKey: Boolean(clearCredentials || clearPushKey),\n      // TODO: backward compatibility, remove when all users migrate to push keys\n      pushCert: Boolean(clearCredentials || clearPushCert),\n      provisioningProfile: Boolean(clearCredentials || clearProvisioningProfile),\n    };\n    return pickBy(credsToClearAll);\n  }\n\n  async ensureProjectIsPublished() {\n    if (this.options.publicUrl) {\n      return undefined;\n    } else {\n      return await this.ensureReleaseExists();\n    }\n  }\n\n  platform() {\n    return PLATFORMS.IOS;\n  }\n\n  // validates whether the icon doesn't have transparency\n  async validateIcon() {\n    // TODO: maybe recommend the icon builder website.\n    try {\n      const icon = this.manifest.ios?.icon ?? this.manifest.icon;\n      if (!icon) {\n        // icon is optional\n        return;\n      }\n      await ensurePNGIsNotTransparent(icon);\n    } catch (err) {\n      if (err instanceof XDLError) {\n        throw err;\n      } else {\n        // something weird happened, let's assume the icon is correct\n      }\n    }\n  }\n\n  // warns for \"damaged\" builds when targeting simulator\n  // see: https://github.com/expo/expo-cli/issues/1197\n  maybeWarnDamagedSimulator() {\n    // see: https://en.wikipedia.org/wiki/Darwin_%28operating_system%29#Release_history\n    const isMacOsCatalinaOrLater =\n      os.platform() === 'darwin' && semver.satisfies(os.release(), '>=19.0.0');\n\n    if (isMacOsCatalinaOrLater && this.options.type === 'simulator') {\n      log.newLine();\n      log(\n        chalk.bold(\n          `🚨 If the build is not installable on your simulator because of \"${chalk.underline(\n            `... is damaged and can't be opened.`\n          )}\", please run:`\n        )\n      );\n      log(chalk.grey.bold('xattr -rd com.apple.quarantine /path/to/your.app'));\n    }\n  }\n}\n\nexport default IOSBuilder;\n"],"file":"IOSBuilder.js"}